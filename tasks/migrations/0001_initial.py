# Generated by Django 5.2.4 on 2025-08-18 06:42

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BulkTaskUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='bulk_task_uploads/')),
                ('original_filename', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('csv', 'CSV File'), ('excel', 'Excel File (.xlsx)'), ('json', 'JSON File')], default='csv', max_length=10)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Completed')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('total_rows', models.PositiveIntegerField(default=0)),
                ('successful_imports', models.PositiveIntegerField(default=0)),
                ('failed_imports', models.PositiveIntegerField(default=0)),
                ('error_log', models.TextField(blank=True)),
                ('success_log', models.TextField(blank=True)),
                ('batch_id', models.CharField(help_text='Unique batch identifier', max_length=100, unique=True)),
                ('skip_duplicates', models.BooleanField(default=True, help_text='Skip duplicate tasks based on title')),
                ('default_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='medium', max_length=20)),
            ],
            options={
                'db_table': 'bulk_task_uploads',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('task_type', models.CharField(choices=[('feature', 'Feature Development'), ('bug', 'Bug Fix'), ('research', 'Research'), ('documentation', 'Documentation'), ('testing', 'Testing'), ('learning', 'Learning Task'), ('maintenance', 'Maintenance'), ('meeting', 'Meeting'), ('other', 'Other')], default='feature', max_length=20)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('testing', 'Testing'), ('completed', 'Completed'), ('blocked', 'Blocked'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=20)),
                ('estimated_hours', models.DecimalField(decimal_places=2, default=1.0, max_digits=6)),
                ('actual_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('acceptance_criteria', models.TextField(blank=True, help_text='Criteria for task completion')),
                ('blocking_reason', models.TextField(blank=True, help_text='Reason if task is blocked')),
                ('points_value', models.PositiveIntegerField(default=10, help_text='Points awarded upon completion')),
                ('import_batch', models.CharField(blank=True, help_text='Batch ID for bulk imports', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskBulkOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='medium', max_length=20)),
            ],
            options={
                'db_table': 'task_bulk_operations',
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#007cba', help_text='Hex color code', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Task Categories',
                'db_table': 'task_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal team comment, not visible to clients')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'task_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('document', 'Document'), ('video', 'Video'), ('audio', 'Audio'), ('archive', 'Archive'), ('code', 'Code File'), ('other', 'Other')], default='other', max_length=20)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('drive_file_id', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('drive_file_url', models.URLField(blank=True)),
                ('drive_thumbnail_url', models.URLField(blank=True)),
                ('local_file_path', models.CharField(blank=True, max_length=500)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False, help_text='Whether file is publicly accessible')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'task_files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskFileAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('view', 'View'), ('download', 'Download'), ('edit', 'Edit')], default='view', max_length=20)),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                'db_table': 'task_file_access',
                'ordering': ['-accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskFileDriveSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('sync_success', models.BooleanField(default=True)),
                ('sync_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'task_file_drive_sync',
            },
        ),
        migrations.CreateModel(
            name='TaskFileUploadBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('uploading', 'Uploading'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='uploading', max_length=20)),
                ('total_files', models.PositiveIntegerField(default=0)),
                ('uploaded_files', models.PositiveIntegerField(default=0)),
                ('failed_files', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_log', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'task_file_upload_batches',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskFileVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.PositiveIntegerField()),
                ('drive_file_id', models.CharField(blank=True, max_length=128)),
                ('file_size', models.PositiveIntegerField()),
                ('upload_notes', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_file_versions',
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='TaskLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#007cba', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_labels',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_type', models.CharField(choices=[('code', 'Code/Repository'), ('document', 'Document'), ('design', 'Design Files'), ('video', 'Video Demo'), ('link', 'External Link'), ('other', 'Other')], default='code', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('external_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('review_notes', models.TextField(blank=True)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'task_submissions',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'task_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskTimeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=0)),
                ('description', models.TextField(blank=True, help_text='What was worked on during this time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_time_logs',
                'ordering': ['-start_time'],
            },
        ),
    ]
