# Generated by Django 5.2.4 on 2025-08-18 06:42

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('programming', 'Programming'), ('framework', 'Framework'), ('database', 'Database'), ('cloud', 'Cloud'), ('devops', 'DevOps'), ('design', 'Design'), ('soft_skill', 'Soft Skill'), ('other', 'Other')], default='other', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('icon', models.CharField(blank=True, help_text='Icon class or URL', max_length=100)),
                ('color', models.CharField(default='#007cba', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('demand_score', models.PositiveIntegerField(default=0, help_text='Market demand score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('team_lead', 'Team Lead'), ('member', 'Team Member'), ('mentor', 'Mentor'), ('guest', 'Guest')], default='member', max_length=20)),
                ('is_team_lead', models.BooleanField(default=False)),
                ('full_name', models.CharField(blank=True, max_length=200)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('github_username', models.CharField(blank=True, max_length=100)),
                ('linkedin_profile', models.URLField(blank=True)),
                ('portfolio_url', models.URLField(blank=True)),
                ('skill_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('level', models.PositiveIntegerField(default=1)),
                ('badges_earned', models.PositiveIntegerField(default=0)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('is_profile_public', models.BooleanField(default=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('task_notifications', models.BooleanField(default=True)),
                ('project_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_objectives', to=settings.AUTH_USER_MODEL)),
                ('skills_to_learn', models.ManyToManyField(blank=True, related_name='learning_goals', to='users.skill')),
            ],
            options={
                'ordering': ['-priority', 'target_date'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('achievement_type', models.CharField(choices=[('certification', 'Certification'), ('project', 'Project Completion'), ('skill', 'Skill Mastery'), ('milestone', 'Milestone'), ('award', 'Award'), ('other', 'Other')], default='other', max_length=50)),
                ('date_achieved', models.DateField()),
                ('verification_url', models.URLField(blank=True)),
                ('certificate_file', models.CharField(blank=True, max_length=500)),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_achievements', to=settings.AUTH_USER_MODEL)),
                ('skills_demonstrated', models.ManyToManyField(blank=True, related_name='achievements', to='users.skill')),
            ],
            options={
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#007cba', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('priority', 'Priority'), ('status', 'Status'), ('technology', 'Technology'), ('skill', 'Skill'), ('topic', 'Topic'), ('general', 'General')], default='general', max_length=50)),
                ('is_system', models.BooleanField(default=False, help_text='System-created tags')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tags', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=100)),
                ('role_in_team', models.CharField(choices=[('lead', 'Team Lead'), ('developer', 'Developer'), ('designer', 'Designer'), ('tester', 'Tester'), ('analyst', 'Business Analyst'), ('mentor', 'Mentor')], max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('projects_contributed', models.PositiveIntegerField(default=0)),
                ('team_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'team_memberships',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('language', 'Programming Language'), ('framework', 'Framework'), ('library', 'Library'), ('database', 'Database'), ('cloud', 'Cloud Platform'), ('tool', 'Development Tool'), ('platform', 'Platform'), ('other', 'Other')], default='other', max_length=50)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('official_url', models.URLField(blank=True)),
                ('popularity_score', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
                'indexes': [models.Index(fields=['category'], name='users_techn_categor_8c8d8c_idx'), models.Index(fields=['popularity_score'], name='users_techn_popular_47f278_idx')],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='related_technologies',
            field=models.ManyToManyField(blank=True, to='users.technology'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_level', models.CharField(blank=True, max_length=50)),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('graduation_year', models.PositiveIntegerField(blank=True, null=True)),
                ('field_of_study', models.CharField(blank=True, max_length=100)),
                ('current_job_title', models.CharField(blank=True, max_length=100)),
                ('current_company', models.CharField(blank=True, max_length=200)),
                ('work_experience_years', models.PositiveIntegerField(default=0)),
                ('preferred_learning_style', models.CharField(blank=True, choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading', 'Reading/Writing')], max_length=20)),
                ('study_hours_per_week', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(168)])),
                ('preferred_team_size', models.PositiveIntegerField(default=4)),
                ('leadership_interest', models.BooleanField(default=False)),
                ('mentoring_interest', models.BooleanField(default=False)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('certifications', models.ManyToManyField(blank=True, related_name='certified_users', to='users.technology')),
                ('interests', models.ManyToManyField(blank=True, related_name='interested_users', to='users.tag')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dashboard_layout', models.CharField(choices=[('grid', 'Grid Layout'), ('list', 'List Layout'), ('card', 'Card Layout')], default='grid', max_length=20)),
                ('items_per_page', models.PositiveIntegerField(default=20)),
                ('dark_mode', models.BooleanField(default=False)),
                ('sidebar_collapsed', models.BooleanField(default=False)),
                ('email_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily Digest'), ('weekly', 'Weekly Summary'), ('never', 'Never')], default='daily', max_length=20)),
                ('push_notifications', models.BooleanField(default=True)),
                ('desktop_notifications', models.BooleanField(default=True)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('team_only', 'Team Members Only'), ('private', 'Private')], default='team_only', max_length=20)),
                ('show_email', models.BooleanField(default=False)),
                ('show_phone', models.BooleanField(default=False)),
                ('show_activity', models.BooleanField(default=True)),
                ('google_drive_enabled', models.BooleanField(default=False)),
                ('google_drive_folder_id', models.CharField(blank=True, max_length=100)),
                ('auto_backup', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('years_experience', models.PositiveIntegerField(default=0)),
                ('last_used', models.DateField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary skill for this user')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_primary', '-proficiency_level', 'skill__name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='skills',
            field=models.ManyToManyField(related_name='users', through='users.UserSkill', to='users.skill'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['category'], name='users_tag_categor_1196cb_idx'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['name'], name='users_tag_name_2abbd8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teammembership',
            unique_together={('user', 'team_name')},
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['category'], name='users_skill_categor_ff80f7_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['demand_score'], name='users_skill_demand__8f99d6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('user', 'skill')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='users_is_acti_847b48_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['total_points'], name='users_total_p_f7aa5f_idx'),
        ),
    ]
